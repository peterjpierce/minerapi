#!/usr/bin/env python

##
# minerstat
#
# by:
# Peter Pierce <peterjpierce@gmail.com>
#
# BTC 1CavTJLrtRXfWJ5MKZH53dudfq9aWa3z6E
# LTC LhdsXnNjZyMJF8TrvV7y1pSmhyQSs9RyB7
# GLD E3qqqrLejCXVPjZD9XnabYNXvJ8nDeHymF
#
# Gather and display statistics for one or more rigs and GPUs that run
# cgminer to mine cryptocurrency.
#
# Enable cgminer's rpc API with directives like this on your command line or
# in your config file:
#   --api-listen --api-allow W:192.168.1.0/24 --api-mcast

##
# CONFIGURE HERE ONLY
# Provide IP address or resolvable host name for each of your rigs.
# Also append api-mcast-port (as :port) if not using the default 4028.
# ----------------------------------------------
RIGS = """
    prop1
    prop2:4028
    192.168.121.22
    192.168.121.15
"""
# ----------------------------------------------

import json
from socket import socket as skt, AF_INET, SOCK_STREAM, SHUT_RDWR
from socket import timeout as skt_timeout, error as skt_err
import re
import sys

BUFFER_SIZE = 4096
SOCKET_TIMEOUT = 1.5
DEFAULT_PORT = 4028


class NotRespondingError(Exception):
    """Raised when a miner does not respond in SOCKET_TIMEOUT seconds."""
    pass


class Miners:
    """Instantiate and provide iterator over a set of Miner objects."""

    def __init__(self, miners_string):
        self.miners = self._parse_miners_string(miners_string)
        self.cursor = 0

    def __iter__(self):
        return self

    def next(self):
        """Basic iterator."""
        if self.cursor >= len(self.miners):
            raise StopIteration
        else:
            miner = self.miners[self.cursor]
            self.cursor += 1
            return miner

    def _parse_miners_string(self, miners_string):
        """Get list of miner dictionaries."""
        miners = []
        rigs = miners_string.split()
        for rig in rigs:
            parts = rig.split(':')
            host = parts[0]
            port = int(parts[1]) if len(parts) > 1 else DEFAULT_PORT
            miners.append({'host': host, 'port': port})
        return miners


class Miner:

    def __init__(self, host, port):
        self.endpoint = (host, port)

    def pool_info(self):
        """Provides {pool, worker} dict in which this rig participates.""" 
        try:
            raw = self.request('pools')
        except Exception as err:
            raise
        primary_pool = raw['POOLS'][0]
        url = re.match('.*://(.*)', primary_pool['URL'])
        pool = url.group(1) if url else None
        worker = primary_pool['User']
        return {'pool': pool, 'worker': worker}

    def devices_info(self):
        """Statistics for each GPU on this rig."""
        return self.request('devs')['DEVS']

    def request(self, command, arg=None):
        """Send command to miner and return parsed response."""
        response = None
        miner = skt(AF_INET, SOCK_STREAM)
        miner.settimeout(SOCKET_TIMEOUT)

        try:
            miner.connect(self.endpoint)
            miner.send(self._instruction(command, arg))
            response = self._response(miner)
        except (skt_timeout, skt_err) as err:
            raise NotRespondingError(err)
        except Exception as err:
            raise

        try:
            miner.shutdown(SHUT_RDWR)
            miner.close()
        except skt_err as err:
            # This machine runs OSX; sockets are already closed
            pass
        except Exception as err:
            raise

        return response

    def _response(self, miner_socket):
        """Read response from socket."""
        response = ''
        while True:
            buff = miner_socket.recv(BUFFER_SIZE)
            if not buff:
                break
            response += buff
        # throw away last \0 byte if there was a response
        return json.loads(response[:-1]) if len(response) else None

    def _instruction(self, command, arg=None):
        """Construct command to pass to a miner."""
        cmd = {'command': command}
        if arg is not None:
            cmd['parameter'] = arg
        return json.dumps(cmd)


class Formatter():
    """Format output for the console."""

    def __init__(self):
        self.gpu_format = self._build_gpu_format()
        self.headings, self.divider = self._build_headings()

    def gpu(self, righost, rigport, pooldict, gpudict):
        """Print formatted data for one GPU."""
        data = {'rig-instance': '%s:%s' % (righost, rigport)}
        for k, v in pooldict.iteritems():
            data[k] = v
        for k, v in gpudict.iteritems():
            data[k] = v
        return self.gpu_format.format(**data)

    def summary(self, rig_count, rigs_up_count, gpu_count, total_hashrate):
        return '%d of %d rigs are up with %d GPUs, totaling %.2f MH/s' % (
                rigs_up_count, rig_count, gpu_count, total_hashrate)

    def _build_headings(self):
        """Construct headings and dividing line."""
        labels = [
                '{0:<20}'.format('rig-instance'),
                '{0:<3}'.format('GPU'),
                '{0:<6}'.format('status'),
                '{0:<4}'.format('load'),
                '{0:<25}'.format('working-in-pool'),
                '{0:<20}'.format('worker'),
                '{0:<4}'.format('MH/s'),
                '{0:<4}'.format('temp'),
                '{0:>5}'.format('fan'),
                '{0:^4}'.format('fan%'),
                '{0:<7}'.format('rejects'),
                '{0:<5}'.format('hwerr'),
                '{0:<4}'.format('mspd'),
                '{0:<4}'.format('gspd'),
                '{0:<3}'.format('int'),
        ]
        row = ' '.join(labels)
        divider = '-' * len(row)
        return (row, divider)

    def _build_gpu_format(self):
        """Return format spec for GPU data."""
        format_parts = [
                '{rig-instance:<20}',
                '{GPU:^3}',
                '{Status:<6}',
                '{GPU Activity:>3}%',
                '{pool:<25}',
                '{worker:<20}',
                '{MHS 5s:4.2f}',
                '{Temperature:3.0f}C',
                '{Fan Speed:>5}',
                '{Fan Percent:>3}%',
                '{Device Rejected%:> 6.2f}%',
                '{Hardware Errors:>5}',
                '{Memory Clock:>4}',
                '{GPU Clock:>4}',
                '{Intensity:>3}',
        ]
        return ' '.join(format_parts)


def run():

    miners = Miners(RIGS)
    console = Formatter()
    rig_count, rigs_up, gpu_count, total_mhs = (0, 0, 0, 0)

    print console.headings
    print console.divider

    for rig in miners:
        host, port = (rig['host'], rig['port'])
        miner = Miner(host, port)
        rig_count += 1

        try:
            pool = miner.pool_info()
            devices = miner.devices_info()
        except NotRespondingError as err:
            print '%s:%s not responding' % (host, port)
            continue
        except KeyboardInterrupt as err:
            sys.exit(0)
        except Exception as err:
            raise
        else:
            rigs_up += 1

        for dev in devices:
            gpu_count += 1
            total_mhs += float(dev['MHS 5s'])
            print console.gpu(host, port, pool, dev)

    print console.divider
    print console.summary(rig_count, rigs_up, gpu_count, total_mhs)

if __name__ == '__main__':
    run()
